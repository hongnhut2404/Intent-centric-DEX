//Step 0.1: Setup the localhost for ETH hardhat
npx hardhat node

//Step 1: In ETH, Alice deploy HTLC. Get the HTLC Address
npx hardhat run scripts/deployHTLC.js --network localhost
output: HTLC address

//Step 2: In ETH, Alice create HTLC and broadcast
npx hardhat run scripts/interactHTLC.js --network localhost
//input: htlcAddress, recipient address
//output: secret (preimage), secret (sha256) 

#swap to Bitcoin Core
//Step 0.2: Setup the localhost for Bitcoin Core 
mux start bitcoin-regtest
tmux send-keys -t bitcoin-regtest:bash.2 "./commands/fund-wallet.sh" C-m 
// Create raw transaction to send from miner address to sender address (Bob)
cd src/create-raw-transaction
go build
./m
input: txid (get from scantxout), vout, sender address, recipient address
output: raw txid

// Sign the raw transaction
cd src/sign-raw-transaction-with-key
go build
./m
input: txid, vout, scriptPubKey, amount (from scantxout), redeem script, raw txid, sender privatekey
output: signed raw txid

// Send the signed transaction
bitcoin-cli sendrawtransaction (signed txid)
input: signed raw txid
output: broadcasted txid

//Step 3: Alice will send the sha256(secret) to Bob (via layer 2/ payment channel) -> Bob use secret to generate the HTLC

//Step 4: Alice will use the secret preimage to claim funds
cd src/sign-redeem-transaction
go build
./m
input: txid, vout, recipient address, amount -> create raw transaction
input: raw txid, secret (preimage), redeem script, recipient private key, recipient pubkey
output: sign redeem txid 

bitcoin-cli sendrawtransaction (sign redeem txid)

//Step 5: Alice receive the BTC -> public secret for Bob

#Swap to ETH local host hardhat
//Step 6: Bob use the preimage secret to receive the ETH from ETH local host chain
Change the withdrawHTLC.js
input: lockID, secret (preimage), htlcAddress, recipient address. 